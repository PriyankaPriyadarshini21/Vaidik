import { useParams, useLocation } from "wouter";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { useMutation } from "@tanstack/react-query";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { format } from "date-fns";
import { ReactNode } from "react";

type FormFields = {
  // Common Fields (shared across all agreements)
  dateOfAgreement?: string;

  // Freelancer Agreement Fields
  freelancerName?: string;
  freelancerAddress?: string;
  freelancerContactInfo?: string;
  freelancerExpertise?: string;
  freelancerClientName?: string;
  freelancerClientAddress?: string;
  freelancerProjectScope?: string;
  freelancerDeliverables?: string;
  freelancerTimeline?: string;
  freelancerMilestones?: string;
  freelancerPaymentRate?: string;
  freelancerPaymentTerms?: string;
  freelancerExpenses?: string;
  freelancerEquipment?: string;
  freelancerWorkHours?: string;
  freelancerLocation?: string;
  freelancerIntellectualProperty?: string;
  freelancerConfidentiality?: string; 
  freelancerNonCompete?: string;
  freelancerIndependentStatus?: string;
  freelancerTermination?: string;
  freelancerModification?: string;
  freelancerGoverningLaw?: string;
  freelancerDispute?: string;

  // Marketing Agreement Fields
  marketingServiceProvider?: string;
  marketingServiceProviderAddress?: string;
  marketingClientName?: string;
  marketingClientAddress?: string;
  marketingServicesScope?: string;
  marketingCampaignObjectives?: string;
  marketingTargetAudience?: string;
  marketingChannels?: string;
  marketingDeliverables?: string;
  marketingTimeline?: string;
  marketingKPIs?: string;
  marketingReportingFrequency?: string;
  marketingBudget?: string;
  marketingPaymentTerms?: string;
  marketingIntellectualProperty?: string;
  marketingContentRights?: string;
  marketingConfidentiality?: string;
  marketingTermination?: string;
  marketingIndemnification?: string;
  marketingGoverningLaw?: string;
  marketingDispute?: string;

  // Software License Agreement Fields
  softwareLicenseCompanyName?: string;
  softwareLicenseCompanyAddress?: string;
  softwareLicenseLicensorName?: string;
  softwareLicenseLicensorAddress?: string;
  softwareLicenseSoftwareName?: string;
  softwareLicenseDescription?: string;
  softwareLicenseType?: string;
  softwareLicenseScope?: string;
  softwareLicenseRestrictions?: string;
  softwareLicenseFees?: string;
  softwareLicensePaymentTerms?: string;
  softwareLicenseStartDate?: string;
  softwareLicenseEndDate?: string;
  softwareLicenseTerritory?: string;
  softwareLicenseUsageRights?: string;
  softwareLicenseModificationRights?: string;
  softwareLicenseDistributionRights?: string;
  softwareLicenseWarranty?: string;
  softwareLicenseSupport?: string;
  softwareLicenseTermination?: string;
  softwareLicenseIpRights?: string;
  softwareLicenseConfidentiality?: string;
  softwareLicenseIndemnification?: string;
  softwareLicenseGoverningLaw?: string;
  softwareLicenseDispute?: string;

  // Software Development Agreement Fields  
  softwareDevCompanyName?: string;
  softwareDevCompanyAddress?: string;
  softwareDevClientName?: string;
  softwareDevClientAddress?: string;
  softwareDevProjectName?: string;
  softwareDevProjectScope?: string;
  softwareDevSpecifications?: string;
  softwareDevTimeline?: string;
  softwareDevMilestones?: string;
  softwareDevDeliverables?: string;
  softwareDevPaymentAmount?: string;
  softwareDevPaymentSchedule?: string;
  softwareDevIpRights?: string;
  softwareDevAcceptanceCriteria?: string;
  softwareDevTestingProcedure?: string;
  softwareDevMaintenanceTerms?: string;
  softwareDevSupportTerms?: string;
  softwareDevConfidentiality?: string;
  softwareDevTermination?: string;
  softwareDevIndemnification?: string;
  softwareDevWarranty?: string;
  softwareDevGoverningLaw?: string;
  softwareDevDispute?: string;

  // Sales Agreement Fields
  salesSellerName?: string;
  salesSellerAddress?: string;
  salesBuyerName?: string;
  salesBuyerAddress?: string;
  salesProductDescription?: string;
  salesQuantity?: string;
  salesUnitPrice?: string;
  salesTotalPrice?: string;
  salesDeliveryTerms?: string;
  salesDeliveryDate?: string;
  salesPaymentTerms?: string;
  salesWarranty?: string;
  salesInspectionPeriod?: string;
  salesQualityStandards?: string;
  salesReturnPolicy?: string;
  salesLiabilityTerms?: string;
  salesForceTerms?: string;
  salesGoverningLaw?: string;
  salesArbitrationVenue?: string;
  salesNoticesPeriod?: string;

  // Service Agreement Fields
  serviceProviderName?: string;
  serviceProviderAddress?: string;
  serviceClientName?: string;
  serviceClientAddress?: string;
  serviceDescription?: string;
  serviceDuration?: string;
  serviceStartDate?: string;
  serviceEndDate?: string;
  serviceFees?: string;
  servicePaymentTerms?: string;
  serviceDeliverables?: string;
  serviceTimeline?: string;
  servicePerformanceMetrics?: string;
  serviceTermination?: string;
  serviceConfidentiality?: string;
  serviceIntellectualProperty?: string;
  serviceIndemnification?: string;
  serviceLimitation?: string;
  serviceGoverningLaw?: string;
  serviceDisputeResolution?: string;

  // Employment Agreement Fields
  employmentCompanyName?: string;
  employmentCompanyAddress?: string;
  employmentEmployeeName?: string;
  employmentEmployeeAddress?: string;
  employmentJobTitle?: string;
  employmentStartDate?: string;
  employmentProbationPeriod?: string;
  employmentWorkingHours?: string;
  employmentPlaceOfWork?: string;
  employmentSalary?: string;
  employmentSalaryPaymentDate?: string;
  employmentBenefits?: string;
  employmentLeavePolicy?: string;
  employmentNoticePeriod?: string;
  employmentTerminationConditions?: string;
  employmentIntellectualProperty?: string;
  employmentConfidentiality?: string;
  employmentNonCompete?: string;
  employmentJurisdiction?: string;
  employmentWorkPolicy?: string;
  employmentPerformanceReview?: string;
  employmentBonusStructure?: string;

  // Data Processing Agreement Fields
  dpaProcessorName?: string;
  dpaProcessorAddress?: string;
  dpaControllerName?: string;
  dpaControllerAddress?: string;
  dpaDataTypes?: string;
  dpaDataSubjects?: string;
  dpaProcessingPurpose?: string;
  dpaProcessingDuration?: string;
  dpaSecurityMeasures?: string;
  dpaSubProcessors?: string;
  dpaSubProcessorRequirements?: string;
  dpaDataBreachNotification?: string;
  dpaBreachTimeline?: string;
  dpaDataTransfers?: string;
  dpaDataProtectionImpact?: string;
  dpaAudits?: string;
  dpaConfidentiality?: string;
  dpaDataDeletion?: string;
  dpaTermination?: string;
  dpaGoverningLaw?: string;
  dpaLiability?: string;
  dpaComplianceRequirements?: string;

  // Vendor Agreement Fields
  vendorCompanyName?: string;
  vendorCompanyAddress?: string;
  vendorContactName?: string;
  vendorContactDetails?: string;
  clientCompanyName?: string;
  clientCompanyAddress?: string;
  servicesDescription?: string;
  deliverySchedule?: string;
  qualityStandards?: string;
  pricingTerms?: string;
  paymentSchedule?: string;
  performanceMetrics?: string;
  warrantyTerms?: string;
  liabilityTerms?: string;
  insuranceRequirements?: string;
  terminationConditions?: string;
  confidentialityTerms?: string;
  intellectualPropertyRights?: string;
  complianceRequirements?: string;
  disputeResolutionProcess?: string;
  governingLawJurisdiction?: string;
  amendmentTerms?: string;

  // Shareholders Agreement Fields
  shareholderCompanyName?: string;
  shareholderCompanyAddress?: string;
  shareholderNames?: string;
  shareholderAddresses?: string;
  shareholderShares?: string;
  numberOfDirectors?: string;
  directorNominationThreshold?: string;
  boardQuorum?: string;
  mattersRequiringApproval?: string;
  approvalType?: "majority" | "supermajority" | "unanimous";
  shareTransferRestrictions?: "yes" | "no";
  rightOfFirstRefusal?: "yes" | "no";
  tagAlongRights?: "yes" | "no";
  dragAlongRights?: "yes" | "no";
  dividendThreshold?: string;
  nonCompetePeriod?: string;
  arbitrationLocation?: string;
  arbitrationLanguage?: string;
  governingLawJurisdiction?: string;
  noticeAddress?: string;
  shareholderNoticeAddresses?: string;
  amendmentProcedure?: string;
  confidentialityDefinition?: string;
  dividendDistributionPolicy?: string;
  additionalProvisions?: string;

  // Subscription Agreement Fields
  subscriptionIssuerName?: string;
  subscriptionIssuerAddress?: string;
  subscriptionSubscriberName?: string;
  subscriptionSubscriberAddress?: string;
  subscriptionNumShares?: string;
  subscriptionShareClass?: string;
  subscriptionPricePerShare?: string;
  subscriptionTotalAmount?: string;
  subscriptionPaymentMethod?: string;
  subscriptionPaymentDueDate?: string;
  subscriptionBoardApprovalDate?: string;
  subscriptionComplianceStatus?: string;
  subscriptionRocFilings?: string;
  subscriptionAllotmentTimeline?: string;
  subscriptionArbitrationCity?: string;

  // Stock Purchase Agreement Fields
  stockSellerName?: string;
  stockSellerAddress?: string;
  stockBuyerName?: string;
  stockBuyerAddress?: string;
  stockNumShares?: string;
  stockCompanyName?: string;
  stockPurchasePrice?: string;
  stockPaymentMethod?: string;
  stockPaymentDeadline?: string;
  stockClosingDate?: string;
  stockClosingLocation?: string;
  stockJurisdiction?: string;

  // Convertible Note Agreement Fields
  convertibleCompanyName?: string;
  convertibleCompanyAddress?: string;
  convertibleInvestorName?: string;
  convertibleInvestorAddress?: string;
  convertiblePrincipalAmount?: string;
  convertibleInterestRate?: string;
  convertibleMaturityDate?: string;
  convertibleQualifiedAmount?: string;
  convertibleDiscountPercent?: string;
  convertibleValuationCap?: string;
  convertibleSecurityType?: string;
  convertibleDefaultDays?: string;
  convertibleArbitrationCity?: string;

  // SAFE Agreement Fields
  safeEffectiveDate?: string;
  safeCompanyName?: string;
  safeJurisdiction?: string;
  safeCompanyAddress?: string;
  safeInvestorName?: string;
  safeInvestorAddress?: string;
  safeInvestmentAmount?: string;
  safeUsageOfFunds?: string;
  safeFinancingThreshold?: string;
  safeValuationCap?: string;
  safeDiscountRate?: string;
  safeArbitrationLocation?: string;

  // Commission Agreement Fields
  commissionCompanyName: string;
  commissionEntityType: string;
  commissionCompanyAddress: string;
  commissionInvestorName: string;
  commissionInvestorAddress: string;
  commissionAmount: string;
  commissionMaturityDate: string;
  commissionInterestRate: string;
  commissionCompoundingFreq: string;
  commissionQualifiedMin: string;
  commissionDiscountPercent: string;
  commissionValuationCap: string;
  commissionLiquidityMult: string;
  commissionReportingFreq: string;
  commissionObserverRights: "yes" | "no";
  commissionArbitrationRules: string;
  commissionArbitrationCity: string;

  // Investment Agreement Fields
  investmentInvestorName?: string;
  investmentInvestorAddress?: string;
  investmentCompanyName?: string;
  investmentCompanyAddress?: string;
  investmentAmount?: string;
  investmentType?: string;
  paymentTimeline?: string;
  investmentPurpose?: string;
  investmentVotingRights?: string;
  boardRepresentation?: string;
  buybackTerms?: string;
  ipoExitRights?: string;
  investmentConfidentiality?: string;
  investmentTermination?: string;
  investmentArbitrationCity?: string;

  // Voting Rights Agreement Fields
  votingCompanyName?: string;
  votingCompanyAddress?: string;
  founderNames?: string;
  founderAddresses?: string;
  investorNames?: string;
  investorAddresses?: string;
  shareBasedVoting?: "yes" | "no";
  preferredShareVoting?: string;
  reservedMattersThreshold?: string;
  charterChanges?: "yes" | "no";
  newSharesIssuance?: "yes" | "no";
  mergerThreshold?: string;
  mergerApproval?: "yes" | "no";
  directorAppointment?: "yes" | "no";
  liquidationApproval?: "yes" | "no";
  investorDirectors?: string;
  founderDirectors?: string;
  boardCompositionChanges?: string;
  proxiesAllowed?: "yes" | "no";
  proxyNoticeRequired?: "yes" | "no";
  deadlockTimeframe?: string;
  votingConfidentiality?: string;
  investorShareThreshold?: string;
  mutualTermination?: "yes" | "no";
  votingArbitrationVenue?: string;
  votingGoverningLaw?: string;
  companyRepresentative?: string;
  companyRepTitle?: string;
  founderSignatures?: string;
  investorRepName?: string;
  investorRepTitle?: string;

  // Consulting Agreement Fields
  consultingConsultantName?: string;
  consultingConsultantAddress?: string;
  consultingConsultantExpertise?: string;
  consultingClientName?: string;
  consultingClientAddress?: string;
  consultingServicesScope?: string;
  consultingObjectives?: string;
  consultingDeliverables?: string;
  consultingTimeline?: string;
  consultingMilestones?: string;
  consultingReportingStructure?: string;
  consultingCompensation?: string;
  consultingPaymentTerms?: string;
  consultingExpenses?: string;
  consultingTerm?: string;
  consultingTermination?: string;
  consultingConfidentiality?: string;
  consultingNonCompete?: string;
  consultingIntellectualProperty?: string;
  consultingIndependentStatus?: string;
  consultingProfessionalStandards?: string;
  consultingLiability?: string;
  consultingInsurance?: string;
  consultingGoverningLaw?: string;
  consultingDispute?: string;
};

const getFormSchema = (type: string) => {
  switch (type) {
    case "freelancer":
      return z.object({
        dateOfAgreement: z.string().min(1, "Date is required"),
        freelancerName: z.string().min(1, "Freelancer name is required"),
        // Keep all freelancer validations
      });
    case "dpa":
      return z.object({
        dateOfAgreement: z.string().min(1, "Date is required"),
        dpaProcessorName: z.string().min(1, "Processor name is required"),
        // Keep all DPA validations
      });
    // Keep all other cases
    default:
      return z.object({});
  }
};

const getFormTitle = (type: string) => {
  switch (type) {
    case "dpa":
      return "Data Processing Agreement";
    case "vendor":
      return "Vendor Agreement";
    case "marketing":  
      return "Marketing Agreement";
    case "software-license":
      return "Software License Agreement"; 
    case "software-development":
      return "Software Development Agreement";
    case "consulting":
      return "Consulting Agreement";
    case "freelancer":
      return "Freelancer Agreement";
    default:
      return "Create Agreement";
  }
};

const getDefaultValues = (type: string) => {
  const today = format(new Date(), "yyyy-MM-dd");
  
  switch (type) {
    case "freelancer":
      return {
        dateOfAgreement: today,
      };
    case "dpa":
      return {
        dateOfAgreement: today,
      };
    // Keep all other cases
    default:
      return {};
  }
};

const renderFormFields = (type: string, form: any): ReactNode => {
  switch (type) {
    case "freelancer":
      return (
        <>
          <FormField
            control={form.control}
            name="dateOfAgreement"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Date of Agreement</FormLabel>
                <FormControl>
                  <Input type="date" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          {/* Keep all other freelancer form fields */}
        </>
      );
    case "dpa":
      return (
        <>
          <FormField
            control={form.control}
            name="dateOfAgreement"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Date of Agreement</FormLabel>
                <FormControl>
                  <Input type="date" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
          {/* Keep all other DPA form fields */}
        </>
      );
    // Keep all other cases
    default:
      return null;
  }
};

interface RouteParams {
  type: string;
}

export default function DocumentCreator() {
  const params = useParams<RouteParams>();
  const { toast } = useToast();
  const [, setLocation] = useLocation();

  const createDocumentMutation = useMutation({
    mutationFn: async (data: FormFields) => {
      const response = await apiRequest("POST", "/api/documents", {
        title: `${getFormTitle(params.type)} - ${format(new Date(), "yyyy-MM-dd")}`,
        type: params.type,
        content: data,
        status: "draft"
      });
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/documents"] });
      toast({
        title: "Success",
        description: "Document created successfully",
      });
      setLocation("/documents");
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive", 
      });
    },
  });

  const formSchema = getFormSchema(params.type);

  const form = useForm<FormFields>({
    resolver: zodResolver(formSchema),
    defaultValues: getDefaultValues(params.type),
  });

  const onSubmit = async (data: FormFields) => {
    await createDocumentMutation.mutateAsync(data);
  };

  return (
    <div className="container mx-auto py-6 space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-semibold">{getFormTitle(params.type)}</h1>
      </div>

      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
          {renderFormFields(params.type, form)}
          
          <div className="flex justify-end gap-4">
            <Button
              type="button"
              variant="outline"
              onClick={() => setLocation("/documents")}
            >
              Cancel
            </Button>
            <Button 
              type="submit"
              disabled={createDocumentMutation.isPending}
            >
              {createDocumentMutation.isPending ? "Creating..." : "Create Agreement"}
            </Button>
          </div>
        </form>
      </Form>
    </div>
  );
}